
TRABALHO PRÁTICO — INF008 – Programação Orientada a Objetos
Curso: Análise e Desenvolvimento de Sistemas
Professor: Sandro Santos Andrade

1. Objetivo Geral

Desenvolver um sistema em Java para gerenciamento de uma livraria, utilizando práticas avançadas de programação orientada a objetos, como interfaces, polimorfismo e ligação dinâmica (dynamic binding). O sistema deverá possuir uma interface gráfica construída em JavaFX ou outro framework de UI em Java (Qt, Swing, SWT, etc.) e deverá ser extensível por meio de plug-ins.

2. Requisitos Funcionais

Gestão de Usuários
- Cadastro, edição, exclusão e listagem de usuários.
- Exibição de informações como nome, e-mail e data de registro.

Gestão de Livros
- Cadastro, edição, exclusão e listagem de livros.
- Atributos: título, autor, ISBN, ano de publicação, quantidade de cópias disponíveis.

Gestão de Empréstimos (Loans)
- Registro de novos empréstimos.
- Registro de devoluções.
- Associações com usuários e livros.
- Verificação da disponibilidade de cópias do livro.

Relatório de Livros Emprestados
- Exibição de todos os livros que estão atualmente emprestados.
- Informações relevantes: título, autor, nome do usuário que emprestou, data do empréstimo.

Sistema de Plug-ins
- Cada funcionalidade (CRUD de livros, usuários, empréstimos, e relatório) deverá ser implementada como plug-in independente, carregado dinamicamente pelo sistema principal.

3. Requisitos Não-Funcionais

- O sistema deve ser implementado em Java 24.0.1.
- A interface gráfica deve ser desenvolvida em JavaFX ou outra biblioteca de UI compatível.
- O acesso ao banco de dados deve ser feito via JDBC ou algum framework de ORM, com a base de dados MariaDB gerada pelo ambiente Docker em anexo.
- A arquitetura do sistema deve ser modular, favorecendo a reutilização de código e a extensibilidade via plug-ins, de acordo com a implementação inicial de microkernel disponibilizada.
- Deve ser possível adicionar ou remover funcionalidades (plug-ins) sem recompilar o sistema principal.
- Para usuários do Windows, sugere-se o uso do WSL: https://learn.microsoft.com/pt-br/windows/wsl/install
- O projeto deve utilizar o Maven como ferramenta de build.

Boas Práticas:
- Use nomes significativos para variáveis, métodos e classes.
- Divida a lógica em métodos pequenos e reutilizáveis.
- Siga as convenções de programação do próprio Java.
- Lembre-se que uma solução simples é sempre melhor.

4. Critérios de Avaliação

| Critério                                            | Pontos |
|-----------------------------------------------------|--------|
| Implementação correta dos requisitos                | 3,0    |
| Uso adequado de interfaces e polimorfismo           | 2,0    |
| Arquitetura modular com plug-ins                    | 2,0    |
| Qualidade da interface gráfica (UX/UI)              | 1,5    |
| Clareza, organização e documentação do código       | 1,0    |
| Testes funcionais mínimos (execução de casos de uso)| 0,5    |

5. Entregáveis

- Código-fonte do sistema + arquivo README.md compactados em .zip ou .tar.gz.
  OBS: o pacote não deve conter arquivos .class, apenas .java. Limpe o projeto antes de empacotar.
- O README.md deve conter:
  - Instruções de compilação e execução.
    OBS: A compilação e execução do projeto não deve requerer a instalação de nenhuma IDE.

6. Prazo e Forma de Entrega

- O trabalho deve ser enviado até o dia 05/08/2025 às 23:59:59 (prazo não extensível).
- O código-fonte e o arquivo README.md devem ser enviados por e-mail para:
  sandroandrade@ifba.edu.br
- O assunto do e-mail deve ser:
  INF008 T2 <seu-nome-completo>
  Exemplo: INF008 T2 Eduardo da Silva Santos
- Trabalhos enviados com outro assunto ou para outro e-mail não serão corrigidos.

7. Informações Importantes

- Todos os códigos-fonte entregues serão checados por plágio utilizando as ferramentas:
  - MOSS: https://theory.stanford.edu/~aiken/moss/
  - JPlag: https://github.com/jplag/JPlag
- Todas as dúvidas sobre o trabalho deverão ser discutidas abertamente no grupo da disciplina no Telegram.

Bom trabalho!
